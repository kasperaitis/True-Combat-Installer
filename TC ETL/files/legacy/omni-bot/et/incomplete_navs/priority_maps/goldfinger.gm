//==========================================================================================
//
//  Gold Finger (Final) - goldfinger.gm
//
//  Who         When            What
//------------------------------------------------------------------------------------------
//  Mateos      26 August 2017  Initial script.
//
//==========================================================================================
//

/****************************************************
Path mapping and script by Mateos
Correspondant WAY file size: -
Last update: 10th November 2017
****************************************************/

global Map =
{
    Debug = 0, // Please set to zero before distributing your script

    // ************************************************************************

    // Counters to define which goal got destroyed (same wm_announce)
    stairCounter = 0,
    goldLadderCounter = 0,

    // Variables to know if the Gold is reachable
    isEntryToGoldRoomBuilt = false,
    isEntryToTowerWallBuilt = false,
    isStairNearGoldBuilt = false,
    isGoldLadderBuilt = false,

    iStolenGoldInProgress = 0,

    // Elevator status: Bottom, Moving Up, Top or Moving Down
    elevatorStatus = "Bottom",

    // GRENADE_TruckMines-related variables
    isGrenadeGoalInProgress = false,
    iThrownGrenadesCount = 0,

    // Goal name disambiguation
    BUILD_Gold_Ladder = "BUILD_gold_stair",
    PLANT_Gold_Ladder = "PLANT_gold_stair",

	// ************************************************************************

    /**
     * Completes IsGoldReachable().
     * The only way to get out of that room is to have the inner ladder built,
     * and either the door leading to it being a normal door (not reinforced by Axis)
     * or the entry to Gold Room isn't built (goes through Axis spawn though).
     * Used for Gold Room goals: BUILD/PLANT_Stair_near_Gold and FLAG_escape_with_Gold_to_truck.
     */
    CanEscapeGoldRoom = function()
    {
        return Map.isGoldLadderBuilt && (!Map.isEntryToGoldRoomBuilt || !Map.isEntryToTowerWallBuilt);
    },

    /**
     * Checks if the Gold is reachable.
     * Returns true if so, false otherwise.
     * TODO What if the Gold is dropped outside the room?
     */
    IsGoldReachable = function()
    {
        // Stair near Gold isn't built
        if ( !Map.isStairNearGoldBuilt )
        {
           return false;
        }

        // Room is totally closed
        if ( Map.isEntryToGoldRoomBuilt && Map.isEntryToTowerWallBuilt )
        {
            return false;
        }

        // At this point, either the bottom way or the top way
        return !Map.isEntryToGoldRoomBuilt || Map.isGoldLadderBuilt;
    },

    /**
     * Manages CAMP goals availability for both teams.
     */
    ManageCampGoals = function()
    {
        Util.DisableGoal( "CAMP_.*" );

        if ( Map.iStolenGoldInProgress > 0 )
        {
            Util.EnableGoal( "CAMP_Truck.*" );
        }
        else
        {
            Util.EnableGoal( "CAMP_InsideBottom.*" );
            Util.EnableGoal( "CAMP_Tower.*" );

            if ( !Map.isEntryToTowerWallBuilt )
            {
                Util.EnableGoal( "CAMP_InsideTop.*" );
            }
        }
    },

    /**
     * Either enables or disables the Gold room goals depending on its reachability.
     */
    SetGoldRoomAvailability = function()
    {
        // blockwall/blockbridge flags refresh
        sleep( 1 );

        SetAvailableMapGoals( TEAM.AXIS, Map.CanEscapeGoldRoom(), "PLANT_Stair_near_Gold" );

        SetAvailableMapGoals( TEAM.ALLIES, Map.CanEscapeGoldRoom(), "BUILD_Stair_near_Gold" );
        SetAvailableMapGoals( TEAM.ALLIES, Map.CanEscapeGoldRoom() && Map.IsGoldReachable(), "FLAG_escape_with_Gold_to_truck" );
    },

    /**
     * Opens or closes the waypoints at the bottom and at the top of the inner ladder.
     */
    SetInnerLadderReachability = function( bReachability )
    {
        Wp.SetWaypointFlag( "InnerLadder", "closed", !bReachability );
    },

    /**
     * Opens or closes the waypoints at the bottom and at the top of the outer ladder.
     */
    SetOuterLadderReachability = function( bReachability )
    {
        Wp.SetWaypointFlag( "OuterLadderBottom", "closed", !bReachability );
        Wp.SetWaypointFlag( "OuterLadderTop", "closed", !bReachability );
    },

    /**
     * Manages the waypoints before and after the Entry to Tower Wall.
     * At map start, it's a simple door (door flags);
     * If Axis builds it, it turns into a destructible (blockwall flags).
     */
    SetEntryToTowerWallFlags = function( bAvailable )
    {
        Wp.SetWaypointFlag( "EntryToTowerWallInside", "door", bAvailable );
        Wp.SetWaypointFlag( "EntryToTowerWallOutside", "door", bAvailable );

        Wp.SetWaypointFlag( "EntryToTowerWallInside", "blockwall", !bAvailable );
        Wp.SetWaypointFlag( "EntryToTowerWallOutside", "blockwall", !bAvailable );
    },

    // ************************************************************************

    Navigation =
    {
        elevator_top =
        {
            navigate = function( _this )
            {
                // The bot is inside the elevator, wait until it is a the bottom
				_this.Goto( _this.Bot.GetPosition() );
				while ( Map.elevatorStatus != "Bottom" )
                {
					_this.Bot.MoveTowards( _this.Bot.GetPosition() );
					yield();
				}
            },
        },

        elevator_bottom =
        {
            navigate = function( _this )
            {
            	if ( Map.elevatorStatus != "Bottom" )
            	{
	                // The bot is in front of door, wait until the elevator is a the bottom
					_this.Goto( _this.Bot.GetPosition() );
					while ( Map.elevatorStatus != "Bottom" )
                    {
						yield();
					}
				}
                else
                {
					// Open the door
					_this.AddAimRequest( Priority.High, "facing", Vec3( 0, 1, 0 ) );
					for ( i = 0; i < 40 && _this.Bot.GetPosition().y < -360; i += 1 )
                    {
						_this.Bot.PressButton( BTN.USE );
						_this.Bot.ResetStuckTime(); // Don't jump
						sleep( 0.1 );
					}
				}
            },
        },

        getoutofherestalker =
        {
            navigate = function( _this )
            {
                if ( !_this.Bot.HasRole( ROLE.AMBUSHER ) )
                {
                    Util.MapDebugPrint( _this.Bot.Name + " doesn't have ROLE.AMBUSHER, exiting path through", true );
                    return;
                }

                _this.Bot.ClearRoles( ROLE.AMBUSHER );
                Map.Switches.elevator_bottom.Enabled = true;
                Util.MapDebugPrint( _this.Bot.Name + " got his role removed", true );
            },
        },

        // Adapted from Gold Rush rnadehall path through
		// /bot waypoint_setproperty paththrough Navigation_PT:grenade_truckmines
        grenade_truckmines =
		{
			wpInfo = Util.WpNameInfo( "GRENADE_TruckMines" ),

			EvalFunc = function( _this )
			{
				return Map.iThrownGrenadesCount < 3 && !Map.isGrenadeGoalInProgress && _this.Bot.HasAmmo( WEAPON.ALLY_GRENADE );
			},

			navigate = function( _this )
			{
				Map.isGrenadeGoalInProgress = true;

				_this.AddAimRequest( Priority.High, "facing", Map.Navigation.grenade_truckmines.wpInfo.facing );

				if ( _this.Goto( Map.Navigation.grenade_truckmines.wpInfo.position ) == EVENT.PATH_SUCCESS )
				{
                    // Switch to the grenade
                    _this.AddWeaponRequest( Priority.High, WEAPON.ALLY_GRENADE );
					_this.BlockForWeaponChange( WEAPON.ALLY_GRENADE );

                    // Wait for the switch to actually complete
                    sleep( 0.5 );

                    // Throw it
					_this.Bot.HoldButton( BTN.ATTACK1, 0.5 );

                    // Wait for the grenade to actually explode
                    sleep( 3.5 );

                    Map.iThrownGrenadesCount += 1;
				}

				Map.isGrenadeGoalInProgress = false;

                // When the gate and the land mines to the truck are blown up, disable
                if ( Map.iThrownGrenadesCount == 3 )
                {
                    // Wait for the last grenade explosion
                    sleep( 2 );

                    Util.MapDebugPrint( "Disabling ATTACK_TruckMines + Path through", true );
                    SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_TruckMines" );
                    Wp.SetWaypointFlag( "GRENADE_TruckMines", "closed", true );

                    Util.MapDebugPrint( "Enabling CAPPOINT_Truck", true );
                    SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Truck" );
                }
			},
		},

        jump =
        {
            navigate = function( _this )
            {
                // Since this kind of navigation doesn't work well with waypoints
                wpTable = {};
				Wp.GetWaypointByName( "top", wpTable );

                // With a good jump while going forward to pass the big step
                _this.AddAimRequest( Priority.High, "facing", wpTable.facing );
 				_this.Bot.HoldButton( BTN.FORWARD, 1 );

                _this.Bot.HoldButton( BTN.JUMP, 0.5 );
            },
        },

        // /bot waypoint_setproperty paththrough Navigation_PT:rope
        ladder =
        {
            navigate = function( _this )
            {
                // Fall a bit
                sleep( 1 );

                // Get on the ladder
                _this.AddAimRequest( Priority.High, "facing", Vec3( 0, -1, 0 ) );
                _this.Bot.HoldButton( BTN.FORWARD, 0.5 );
                sleep( 0.5 );

                // Get to the bottom
                _this.Bot.HoldButton( BTN.FORWARD, 8 );
                sleep( 8 );
            },
        },
    },

    Switches =
 	{
        // /bot waypoint_setproperty paththrough UseSwitch_PT:elevator_bottom
 		elevator_bottom =
 		{
 			Enabled = true,
 			Priority = 0,
 			WaypointName = "elevator_bottom",
 			AimPosition = Vec3( -12, -250, 67 ),
			ExitConditions =
			{
				f = function( bot )
                {
					return Map.elevatorStatus == "Moving up";
				}
			},
 			Wait = function()
 			{
                return Map.elevatorStatus == "Top";
 			},
 		},

        // /bot waypoint_setproperty paththrough UseSwitch_PT:elevator_top_button
 		elevator_top_button =
 		{
 			Enabled = true,
 			Priority = 0,
 			WaypointName = "elevator_top_button",
 			Timeout = 15000, //wait while the elevator is moving down
 			AimPosition = Vec3( -80, -235, 1385 ),
			ExitConditions =
			{
				f = function( bot )
                {
					return Map.elevatorStatus == "Top" || Map.elevatorStatus == "Moving up";
				}
			},
 			Wait = function()
 			{
                return Map.elevatorStatus == "Top";
 			},
 		},
 	},

    /**
     * Updates the elevator status.
     * Handles top button switch for a special case.
     */
    Elevator_Moving = function( trigger )
    {
        // If the elevator were at the bottom,
        // or it was moving down but someone is standing inside already at the bottom
		if ( Map.elevatorStatus == "Bottom" || Map.elevatorStatus == "Moving down" )
        {
        	Map.elevatorStatus = "Moving up";
            Util.MapDebugPrint( "Elevator moving up", true );
		}
        else
        {
        	Map.elevatorStatus = "Moving down";
			Map.Switches.elevator_top_button.Enabled = true;
            Util.MapDebugPrint( "Elevator moving down", true );
		}

        // Let the movement finish (~ 5 seconds)
        sleep( 5 );

        if ( trigger.Action == "opening" || Map.elevatorStatus == "Moving up")
        {
            // Gone from bottom to top
            Map.elevatorStatus = "Top";
			Map.Switches.elevator_top_button.Enabled = false;
            Util.MapDebugPrint( "Elevator at top", true );
        }
        else
        {
            // Gone from top to bottom
            Map.elevatorStatus = "Bottom";
            Util.MapDebugPrint( "Elevator at bottom", true );
        }
    },

    /**
     * When the elevator is at the bottom and several bots try to get inside at once,
     * it can happen that one bot or more couldn't get in before the elevator goes to the top.
     * Since these bots were past the path through supposed to make them wait,
     * they were trapped, standing below the elevator forever, spamming the call button.
     * This function makes these bots get outside the bottom in this particular case.
     */
    Below_Elevator =
    {
        Name = "Below_Elevator",
        TriggerOnClass = CLASS.ANYPLAYER,
        OnEnter = function( ent )
        {
            bot = Util.IsBot( ent );

            if ( !bot ) { return; }

            if ( Map.elevatorStatus != "Bottom" )
            {
                Map.Switches.elevator_bottom.Enabled = false;
                bot.SetRoles( ROLE.AMBUSHER );
                Util.MapDebugPrint( bot.Name + " was trapped below the elevator and was given a role", true );

                if ( !bot.HasRole( ROLE.AMBUSHER ) )
                {
                    Util.MapDebugPrint( bot.Name + " doesn't have ROLE.AMBUSHER while he should!", true );
                }
            }
        },
    },

    // ************************************************************************

    // NOTE: CAMP_InsideBottom goals are far away from the other available CAMP goals,
    // but no ROLE is defined for them because the map is tiny, so it's not a big problem
    // to have bots roaming a bit
    Roles =
    {
        Allies = // Team
        {
            AllBots = true, // Each bot is considered for a role

            // The Gate nading
            ATTACKER =
            {
                voice = "Throwing grenade to the gate!",    // Signals voice chat to randomly announce
                numbots = 1,                                // Maximum of 1 bot
                crucialClass = CLASS.ENGINEER,              // First bot
            },
        },
    },

    // ************************************************************************

    // *** TRIGGER CALLBACKS ***
    Allied_Command_Post_Built = function( trigger )
    {
        Util.MapDebugPrint( "Allied_Command_Post_Built" );
    },

    Axis_Command_Post_Built = function( trigger )
    {
        Util.MapDebugPrint( "Axis_Command_Post_Built" );
    },

    Entry_to_Gold_Room_Built = function( trigger )
    {
        Map.isEntryToGoldRoomBuilt = true;
        Map.SetGoldRoomAvailability();

        Util.MapDebugPrint( "Entry_to_Gold_Room_Built" );
    },

    Entry_to_Tower_wall_Built = function( trigger )
    {
        Map.isEntryToTowerWallBuilt = true;

        Map.ManageCampGoals();
        Map.SetGoldRoomAvailability();

        Map.SetEntryToTowerWallFlags( false );

        SetAvailableMapGoals( TEAM.ALLIES, false, Map.BUILD_Gold_Ladder );

        Util.MapDebugPrint( "Entry_to_Tower_wall_Built" );
    },

    Ladder_Built = function( trigger )
    {
        Map.SetOuterLadderReachability( true );

        Util.MapDebugPrint( "Ladder_Built" );
    },

    Stair_near_Gold_Built = function( trigger )
    {
        Map.isStairNearGoldBuilt = true;
        Map.stairCounter = 0;

        Map.SetGoldRoomAvailability();

        Util.MapDebugPrint( "Stair_near_Gold_Built" );
    },

    gold_stair_Built = function( trigger )
    {
        Map.goldLadderCounter = 0;
        Map.isGoldLadderBuilt = true;

        Map.SetInnerLadderReachability( true );
        Map.SetGoldRoomAvailability();

        Util.MapDebugPrint( "gold_stair_Built" );
    },

    mg42_Built = function( trigger )
    {
        Util.EnableGoal( "MOUNTMG42_mg42" );

        Util.MapDebugPrint( "mg42_Built" );
    },

    Allied_Command_Post_Destroyed = function( trigger )
    {
        Util.MapDebugPrint( "Allied_Command_Post_Destroyed" );
    },

    Axis_Command_Post_Destroyed = function( trigger )
    {
        Util.MapDebugPrint( "Axis_Command_Post_Destroyed" );
    },

    Entry_to_Gold_Room_Destroyed = function( trigger )
    {
        Map.isEntryToGoldRoomBuilt = false;
        Map.SetGoldRoomAvailability();

        Util.MapDebugPrint( "Entry_to_Gold_Room_Destroyed" );
    },

    Entry_to_Tower_wall_Destroyed = function( trigger )
    {
        Map.isEntryToTowerWallBuilt = false;

        Map.ManageCampGoals();
        Map.SetGoldRoomAvailability();

        Map.SetEntryToTowerWallFlags( true );

        SetAvailableMapGoals( TEAM.ALLIES, true, Map.BUILD_Gold_Ladder );

        Util.MapDebugPrint( "Entry_to_Tower_wall_Destroyed" );
    },

    Ladder_Destroyed = function( trigger )
    {
        Map.SetOuterLadderReachability( false );

        Util.MapDebugPrint( "Ladder_Destroyed" );
    },

    Stair_near_Gold_Destroyed = function( trigger )
    {
        Map.stairCounter += 1;
        if ( Map.stairCounter < 3 )
        {
            return;
        }

        Map.isStairNearGoldBuilt = false;
        Map.goldLadderCounter = 0;
        Map.stairCounter = 0;

        Map.SetGoldRoomAvailability();

        Util.MapDebugPrint( "Stair_near_Gold_Destroyed" );
    },

    gold_stair_Destroyed = function( trigger )
    {
        Map.goldLadderCounter += 1;
        if ( Map.goldLadderCounter < 3 )
        {
            return;
        }

        Map.goldLadderCounter = 0;
        Map.stairCounter = 0;
        Map.isGoldLadderBuilt = false;

        Map.SetGoldRoomAvailability();
        Map.SetInnerLadderReachability( false );

        Util.MapDebugPrint( "gold_stair_Destroyed" );
    },

    mg42_Destroyed = function( trigger )
    {
        Util.DisableGoal( "MOUNTMG42_mg42" );

        Util.MapDebugPrint( "mg42_Destroyed" );
    },

    escape_with_Gold_to_truck_Taken = function( trigger )
    {
        Map.iStolenGoldInProgress += 1;

        Map.ManageCampGoals();

        Util.MapDebugPrint( "escape_with_Gold_to_truck_Taken" );
    },

    escape_with_Gold_to_truck_Returned = function( trigger )
    {
        Map.iStolenGoldInProgress -= 1;

        Map.ManageCampGoals();

        Util.MapDebugPrint( "escape_with_Gold_to_truck_Returned" );
    },

    escape_with_Gold_to_truck_Secured = function( trigger )
    {
        Map.iStolenGoldInProgress -= 1;

        Map.ManageCampGoals();

        Util.MapDebugPrint( "escape_with_Gold_to_truck_Secured" );
    },
};

global OnMapLoad = function()
{
    // *** TRIGGERS ***
    OnTrigger( "Allied Command Post constructed. Charge speed increased!", Map.Allied_Command_Post_Built );
    OnTrigger( "Axis Command Post constructed. Charge speed increased!", Map.Axis_Command_Post_Built );
    OnTrigger( "The Guard Wall to Gold has been constructed!", Map.Entry_to_Gold_Room_Built );
    OnTrigger( "The Wall has been constructed!", Map.Entry_to_Tower_wall_Built );
    OnTrigger( "The ladder to Gold has been constructed!", Map.Ladder_Built );
    OnTrigger( "The Stair to Gold has been constructed!", Map.Stair_near_Gold_Built );
    OnTrigger( "The Stair has been constructed!", Map.gold_stair_Built );
    OnTrigger( "Axis team has built the MG42!", Map.mg42_Built );

    OnTrigger( "Axis team has destroyed the Allied Command Post!", Map.Allied_Command_Post_Destroyed );
    OnTrigger( "Allied team has destroyed the Axis Command Post!", Map.Axis_Command_Post_Destroyed );
    OnTrigger( "Allies team has destroyed the Guard Wall to Gold!", Map.Entry_to_Gold_Room_Destroyed );
    OnTrigger( "Allies team has destroyed the Wall!", Map.Entry_to_Tower_wall_Destroyed );
    OnTrigger( "Axis team has destroyed the ladder!", Map.Ladder_Destroyed );

    // These two have the same wm_announce: "Axis team has destroyed the Stair!"
    // Only the TagName differs: use it do find which is which
    OnTrigger( "stair", Map.Stair_near_Gold_Destroyed );
    OnTrigger( "Axis team has destroyed the Stair!", Map.Stair_near_Gold_Destroyed );
    OnTrigger( "Gold ladder", Map.gold_stair_Destroyed );
    OnTrigger( "Axis team has destroyed the Stair!", Map.gold_stair_Destroyed );

    OnTrigger( "Allies team has destroyed the MG42!", Map.mg42_Destroyed );

    OnTrigger( "Allies have stolen escape with Gold to truck!", Map.escape_with_Gold_to_truck_Taken );
    OnTrigger( "Axis have returned escape with Gold to truck!", Map.escape_with_Gold_to_truck_Returned );

    // Manage in the same function
    OnTrigger( "Allied team has secured the first Gold Crate!", Map.escape_with_Gold_to_truck_Secured );
    OnTrigger( "Allied team has secured the second Gold Crate!", Map.escape_with_Gold_to_truck_Secured );

    // Elevator triggers
    OnTrigger( "t92_Moving", Map.Elevator_Moving );

    // For bots trapped below the elevator
    OnTriggerRegion( AABB( -15.470, -306.544, 11.397, 38.875, -245.125, 87.523), Map.Below_Elevator );

    // *** CLEAR ALL GOALS FOR BOTH TEAMS ***
    Util.DisableGoal( ".*", true ); // All but routes

    Util.EnableGoal( ".*CAB.*" );
    Util.EnableGoal( "BUILD_Command_Post" );
    Util.EnableGoal( "CAMP_Inside.*" );
    Util.EnableGoal( "CAMP_Tower.*" );
    Util.EnableGoal( "PLANT_Command_Post" );

    // *** AXIS GOALS ***
    SetAvailableMapGoals( TEAM.AXIS, true, {
        "BUILD_Entry_to_Gold_Room",
        "BUILD_Entry_to_Tower_wall",
        "BUILD_mg42",
        "PLANT_Ladder",
        Map.PLANT_Gold_Ladder,
        "REPAIRMG42_mg42",
    });

    // *** ALLIED GOALS ***
    SetAvailableMapGoals( TEAM.ALLIES, true, {
        "ATTACK_TruckMines",
        "BUILD_Ladder",
        Map.BUILD_Gold_Ladder,
        "PLANT_Entry_to_Gold_Room",
        "PLANT_Entry_to_Tower_wall",
        "PLANT_mg42",
    });

    // *** ROLES ***
    SetGoalRole( "ATTACK_TruckMines", ROLE.ATTACKER );

    // *** GOAL PROPERTIES ***
    SetGoalPriority( "MOUNTMG42_mg42", 0.4 ); // 0.7 originally, set below CAMP
    SetGoalPriority( "CAMP_Tower.*", 0.51 );
    SetGoalPriority( "ATTACK_TruckMines", 0.52 );
    SetGoalPriority( "PLANT_Entry_to_Tower_wall", 0.82 );

    // BUILD_Stair_near_Gold has a priority of 0.9
    SetGoalPriority( Map.BUILD_Gold_Ladder, 0.91 );
    SetGoalPriority( "BUILD_Ladder", 0.92 );
    SetGoalPriority( "BUILD_Command_Post", 0.93, TEAM.ALLIES );

    SetMapGoalProperties( "CAMP_.*",                    { mincamptime = 60, maxcamptime = 120 } );

    Util.AddUsePoint( "PLANT_Entry_to_Gold_Room", Vec3( 475, -170, 460 ) );
    Util.SetGoalOffset( 10, 10, -10, "MOUNTMG42_mg42" );
    Util.SetGoalPosition( -150, -205, 1372, "PLANT_Entry_to_Tower_wall" );

    Map.SetEntryToTowerWallFlags( true );
    Map.SetInnerLadderReachability( false );
    Map.SetOuterLadderReachability( false );

    // In case the nav has been saved with the waypoint closed
    Wp.SetWaypointFlag( "GRENADE_TruckMines", "closed", false );

    // Instructions specific to the elevator escape
    SetGoalPriority( "CAMP_GetOutOfHereStalker", 1.1 );
    SetGoalRole( "CAMP_GetOutOfHereStalker", ROLE.AMBUSHER );
    SetMapGoalProperties( "CAMP_GetOutOfHereStalker",   { mincamptime =  0, maxcamptime =   0 } );
    Util.EnableGoal( "CAMP_GetOutOfHereStalker" );
    Util.SetMaxUsers( 5, "CAMP_GetOutOfHereStalker" );

    Util.MapDebugPrint( "Omni-Bot 0.8x map script for Gold Finger (Final) by Mateos executed." );
};

global OnBotJoin = function( bot )
{
    // Uncomment for shootable breakables
    bot.TargetBreakableDist = 90.0;
};

global InitializeRoutes = function()
{
    MapRoutes =
    {
        BUILD_Command_Post =
        {
        },

        PLANT_Command_Post =
        {
        },

        BUILD_Ladder =
        {
        },

        PLANT_Ladder =
        {
        },

        BUILD_Stair_near_Gold =
        {
        },

        PLANT_Stair_near_Gold =
        {
        },

        BUILD_gold_stair =
        {
        },

        PLANT_gold_stair =
        {
        },

        BUILD_Entry_to_Tower_wall =
        {
        },

        PLANT_Entry_to_Tower_wall =
        {
        },

        BUILD_mg42 =
        {
        },

        PLANT_mg42 =
        {
        },

        BUILD_Entry_to_Gold_Room =
        {
        },

        PLANT_Entry_to_Gold_Room =
        {
        },

        FLAG_escape_with_Gold_to_truck =
        {
        },
    };

    Util.Routes(MapRoutes);
};
